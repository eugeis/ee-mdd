xml.backend.module.xsd = '''<% if(module.entities) { %><?xml version="1.0" encoding="UTF-8"?><%

  def namespaceParts = facet.namespaceXmlSchema.tokenize('.').reverse().join('.')

%>
<xsd:schema targetNamespace="http://$namespaceParts" 
  xmlns:xsd="http://www.w3.org/2001/XMLSchema" 
  xmlns:cg="http://$namespaceParts"><%
 
  def mapTypes = [:]
  mapTypes["Long"] = "xsd:long"
  mapTypes["String"] = "xsd:string"
  mapTypes["Double"] = "xsd:double"
  mapTypes["Boolean"] = "xsd:boolean"

%> --enums ${module.enums.size()} -- <%

  module.enums.each { enumi -> 

%>
  <xsd:simpleType name="enumi.name">
    <xsd:annotation>
      <xsd:documentation>enumi.description</xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string"><%

    enumi.lit.each { lit -> 

%>
      <xsd:enumeration value="METRIC"/><%

    }

%>
    </xsd:restriction>
  </xsd:simpleType><%

  }

  module.entities.each { entity -> 

%>
  <xsd:complexType name="$entity.nameXml">
    <xsd:annotation>
       <xsd:documentation>$entity.description</xsd:documentation>
    </xsd:annotation><%

    if (entity.superRef != null) {

%>
    <xsd:complexContent>
      <xsd:extension base="cg:$entity.superRef"><%

    }

    def elements = []
    entity.props.each { prop -> 
      if (prop.opposite != null) {
        elements.add(prop) 
      }
    }

    if (elements.size() > 0) {
%>
    <xsd:sequence><%

      elements.each { prop -> 

%>
          <xsd:element name="$prop.nameXml" type="cg:$prop.type"<% 
        if (prop.multi == true) {

           %> maxOccurs="unbounded"<%

        }

%>>
            <xsd:annotation>
              <xsd:documentation>$prop.description</xsd:documentation>
            </xsd:annotation>
          </xsd:element><%

    } 

%>
    </xsd:sequence><%

    }
    entity.props.each { prop -> 
      def xsdType = prop.type
      if (mapTypes.containsKey(prop.type)) {
        xsdType = mapTypes[prop.type];
      }
      if (prop.opposite == null) { 

%>
        <xsd:attribute name="$prop.nameXml" type="$xsdType" use="required">
          <xsd:annotation>
            <xsd:documentation>Relative position within the TgiView</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
<% 

      } 
    } 

    if (entity.superRef != null) {

%>
      </xsd:extension>
    </xsd:complexContent><%

    }

%>
  </xsd:complexType><%

 } 

%>
</xsd:schema><% 
ret.path = "${destModule.resSrc}/xsd/${module.name}Types.xsd" %><% } %>'''

xml.shared.module.xsd = '''<% if(module.enums) { %><?xml version="1.0" encoding="UTF-8"?><%

  def namespaceParts = facet.namespaceXmlSchema.tokenize('.').reverse().join('.')

%>
<xsd:schema targetNamespace="http://$namespaceParts" 
  xmlns:xsd="http://www.w3.org/2001/XMLSchema" 
  xmlns:cg="http://$namespaceParts"><%
 
  def mapTypes = [:]
  mapTypes["Long"] = "xsd:long"
  mapTypes["String"] = "xsd:string"
  mapTypes["Double"] = "xsd:double"
  mapTypes["Boolean"] = "xsd:boolean"

%> --enums ${module.enums.size()} -- <%

  module.enums.each { enumi -> 

%>
  <xsd:simpleType name="$enumi.name">
    <xsd:annotation>
      <xsd:documentation>enumi.description</xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string"><%

    enumi.literals.each { lit -> 

%>
      <xsd:enumeration value="$lit.name"/><%

    }

%>
    </xsd:restriction>
  </xsd:simpleType><%

  }

%>
</xsd:schema><% 
ret.path = "${destModule.resSrc}/xsd/${module.name}Types.xsd" %><% } %>'''

xml.backend.container.xsd = '''<?xml version="1.0" encoding="UTF-8"?><%

  def namespaceParts = facet.namespaceXmlSchema.split('.') // .reverse().join('.')


%>
<xsd:schema targetNamespace="http://$namespaceParts facet.namespaceXmlSchema" 
  xmlns:xsd="http://www.w3.org/2001/XMLSchema" 
  xmlns:cg="http://tgi.schema.cg.ra.siemens.com"><%
 
  def mapTypes = [:]
  mapTypes["Long"] = "xsd:long"

  item.entities.each { entity -> 

%>
  <xsd:complexType name="$entity.nameXml">
    <xsd:annotation>
       <xsd:documentation>$entity.description</xsd:documentation>
    </xsd:annotation><%

    if (entity.superRef != null) {

%>
    <xsd:complexContent>
      <xsd:extension base="$entity.superRef"><%

    }

    def elements = []
    entity.props.each { prop -> 
      if (prop.opposite != null) {
        elements.add(prop) 
      }
    }

    if (elements.size() > 0) {
%>
    <xsd:sequence><%

      elements.each { prop -> 

%>
          <xsd:element name="$prop.nameXml" type="$prop.type"<% 
        if (prop.multi == true) {

           %> maxOccurs="unbounded"<%

        }

%>>
            <xsd:annotation>
              <xsd:documentation>$prop.description</xsd:documentation>
            </xsd:annotation>
          </xsd:element><%

    } 

%>
    </xsd:sequence><%

    }
    entity.props.each { prop -> 
      def xsdType = prop.type
      if (mapTypes.containsKey(prop.type)) {
        xsdType = mapTypes[prop.type];
      }
      if (prop.opposite == null) { 

%>
        <xsd:attribute name="$prop.nameXml" type="$xsdType" use="required">
          <xsd:annotation>
            <xsd:documentation>Relative position within the TgiView</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
<% 

      } 
    } 

    if (entity.superRef != null) {

%>
      </xsd:extension>
    </xsd:complexContent><%

    }

%>
  </xsd:complexType><%

 } 

%>
</xsd:schema><% 

  ret.path = "${destModule.resSrc}/xsd/${item.name}.xsd" %>'''
